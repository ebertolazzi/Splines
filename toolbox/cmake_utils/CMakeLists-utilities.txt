#
# ------------------------------------------------------------------------
#
function(utils_artifacts_suffix VAR_NAME BUILD_STATIC)
  if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(suffix "_debug")
  else()
    set(suffix "")
  endif()
  if ( ${BUILD_STATIC} )
    set(suffix "_static${suffix}")
  endif()
  if(APPLE)
    set( ${VAR_NAME} _osx${suffix} PARENT_SCOPE )
  elseif(MINGW)
    set( ${VAR_NAME} _mingw${suffix} PARENT_SCOPE )
  elseif(UNIX)
    set( ${VAR_NAME} _linux${suffix} PARENT_SCOPE )
  else()
    set( ${VAR_NAME} "_win_${BITS}${suffix}" PARENT_SCOPE )
  endif()
endfunction()
#
# ------------------------------------------------------------------------
#
# SOURCE_LIST, HEADERS_PUBLIC and HEADERS_PRIVATE contains path
# relative to SOURCE_DIR
#
function(
  utils_setup_target
  TARGET_NAME
  IS_STATIC
  SOURCE_DIR
  SOURCE_LIST
  HEADER_DIR
  HEADERS_LIST
)

  if ( ${IS_STATIC} )
    set( TARGET_S ${UTILS_NAMESPACE}_${TARGET_NAME}_Static )
  else()
    set( TARGET_S ${UTILS_NAMESPACE}_${TARGET_NAME} )
  endif()

  foreach (F ${HEADERS_LIST})
    get_filename_component(DIR ${F} DIRECTORY)
    install( FILES ${HEADER_DIR}/${F} DESTINATION ${PROJECT_PUBLIC_HEADER_DESTINATION}/${DIR})
  endforeach()

  set( SRC )
  foreach (F ${SOURCE_LIST})
    list( APPEND SRC $<BUILD_INTERFACE:${SOURCE_DIR}/${F}> )
  endforeach()

  # lib and ALIASES
  if ( ${IS_STATIC} )
    add_library( ${TARGET_S} STATIC )
    set( SUFFIX ${ARTIFACTS_STATIC_SUFFIX} )
    add_library( "${UTILS_NAMESPACE}::${TARGET_NAME}_Static" ALIAS ${TARGET_S} )
  else()
    add_library( ${TARGET_S} SHARED )
    set( SUFFIX ${ARTIFACTS_DYNAMIC_SUFFIX} )
    add_library( "${UTILS_NAMESPACE}::${TARGET_NAME}" ALIAS ${TARGET_S} )
  endif()

  target_sources( ${TARGET_S} PRIVATE ${SRC} )
  # where to search headers by default
  target_include_directories( ${TARGET_S} PUBLIC "$<BUILD_INTERFACE:${SOURCE_DIR}>" )
  set_target_properties(
    ${TARGET_S} PROPERTIES
    OUTPUT_NAME "${TARGET_NAME}${SUFFIX}"
    POSITION_INDEPENDENT_CODE ON
  )

  set( TARGETS_TO_BE_INSTALLED ${TARGETS_TO_BE_INSTALLED} ${TARGET_S} PARENT_SCOPE )

  if ( EQ_INSTALL_LOCAL )
    add_dependencies( post_build_${PROJECT_NAME} ${TARGET_S} )
  endif()

endfunction()
#
# ------------------------------------------------------------------------
#
function( utils_copy_directory FROM TO )
  file( GLOB_RECURSE S "${FROM}/*" )
  foreach(F ${S})
    # build relative path respect to source directory
    file( RELATIVE_PATH RF ${FROM} ${F} )
    get_filename_component( DIR "${TO}/${RF}" DIRECTORY )
    file( COPY ${F} DESTINATION ${DIR} )
  endforeach(F ${S})
endfunction()
#
# ------------------------------------------------------------------------
#
function(utils_add_library_or_submodule MODULE_NAME MODULE_LIB )
  #
  # DEPENDENCIES (TRY TO USE ALREADY COMPILED SUBMODULE IN LARGE PROJECT)
  #
  set(MODULE_DIR ${MODULE_NAME})
  # Cannot use ARGN directly with list() command,
  # so copy it to a variable first.
  set (extra_args ${ARGN})
  # Did we get any optional args?
  list(LENGTH extra_args extra_count)
  if (${extra_count} GREATER 0)
    list(GET extra_args 0 optional_arg)
    set(MODULE_DIR ${optional_arg})
  endif()

  set(UPDIR ${CMAKE_CURRENT_SOURCE_DIR}/..)
  message(STATUS ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
  message(STATUS "Search library ${MODULE_NAME}${ARTIFACTS_STATIC_SUFFIX}")
  message(STATUS "at ${UPDIR}/${MODULE_DIR}/lib/lib" )
  find_library(
    ${MODULE_LIB} ${MODULE_NAME}${ARTIFACTS_STATIC_SUFFIX}
    HINTS ${UPDIR}/${MODULE_DIR}/lib/lib
    NO_DEFAULT_PATH
  )
  if( ${MODULE_LIB} )
    message(STATUS "Found ${MODULE_LIB}")
    utils_copy_directory(
      "${UPDIR}/${MODULE_DIR}/lib"
      "${CMAKE_CURRENT_SOURCE_DIR}/lib3rd"
    )
  else()
    message(STATUS "NOT Found ${MODULE_NAME}${ARTIFACTS_STATIC_SUFFIX} use submodule")
    if (EXISTS "${CMAKE_SOURCE_DIR}/submodules/${MODULE_DIR}")
      set(ACTUAL_MODULE_DIR "${MODULE_DIR}")
    elseif (EXISTS "${CMAKE_SOURCE_DIR}/submodules/${MODULE_NAME}")
      set(ACTUAL_MODULE_DIR "${MODULE_NAME}")
    else()
      message(FATAL_ERROR "Neither ${MODULE_DIR} nor ${MODULE_NAME} exist in submodules.")
    endif()
    add_subdirectory(./submodules/${ACTUAL_MODULE_DIR})
    include_directories(./submodules/${ACTUAL_MODULE_DIR}/include)
    include_directories(./submodules/${ACTUAL_MODULE_DIR}/src)
    set( ${MODULE_LIB} ${UTILS_NAMESPACE}_${MODULE_NAME}_Static PARENT_SCOPE )
    set( UTILS_DEPEND_TARGETS ${UTILS_DEPEND_TARGETS} ${LIB} PARENT_SCOPE )
  endif()
  message(STATUS "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<")
endfunction()
#
# ------------------------------------------------------------------------
#
function(utils_final_messages)
  if(SSE_FLAGS)
    message(STATUS "Using ${SSE_FLAGS} extensions")
  endif()
  message(STATUS "C compiler                  = ${CMAKE_C_COMPILER_ID} ${CMAKE_C_COMPILER}")
  message(STATUS "C++ compiler                = ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER}")
  message(STATUS "CMAKE_CXX_FLAGS_RELEASE     = ${CMAKE_CXX_FLAGS_RELEASE}")
  message(STATUS "CMAKE_CXX_FLAGS             = ${CMAKE_CXX_FLAGS}")
  message(STATUS "CMAKE_C_FLAGS_RELEASE       = ${CMAKE_C_FLAGS_RELEASE}")
  message(STATUS "CMAKE_C_FLAGS               = ${CMAKE_C_FLAGS}")
  message(STATUS "CMAKE_SYSTEM_NAME           = ${CMAKE_SYSTEM_NAME}")
  message(STATUS "CMAKE_SYSTEM_PROCESSOR      = ${CMAKE_SYSTEM_PROCESSOR}")
  if(APPLE)
    message( STATUS "CMAKE_OSX_SYSROOT           = ${CMAKE_OSX_SYSROOT}" )
    message( STATUS "CMAKE_OSX_ARCHITECTURES     = ${CMAKE_OSX_ARCHITECTURES}" )
    message( STATUS "CMAKE_OSX_DEPLOYMENT_TARGET = ${CMAKE_OSX_DEPLOYMENT_TARGET}" )
  endif()
  message(STATUS "SOURCES = ${SOURCES}")
  message(STATUS "HEADERS = ${HEADERS}")
  message(STATUS "TARGETS_TO_BE_INSTALLED  = ${TARGETS_TO_BE_INSTALLED}")
  message(STATUS "CMAKE_HOME_DIRECTORY     = ${CMAKE_HOME_DIRECTORY}")
  message(STATUS "CMAKE_CURRENT_SOURCE_DIR = ${CMAKE_CURRENT_SOURCE_DIR}")
  message(STATUS "CMAKE_INSTALL_PREFIX     = ${CMAKE_INSTALL_PREFIX}")

  message(STATUS "UTILS_GIT_VERSION   = ${UTILS_GIT_VERSION}")
  message(STATUS "UTILS_ENABLE_TESTS  = ${UTILS_ENABLE_TESTS}")
  message(STATUS "UTILS_BUILD_SHARED  = ${UTILS_BUILD_SHARED}")
  message(STATUS "UTILS_INSTALL_LOCAL = ${UTILS_INSTALL_LOCAL}")

endfunction()
